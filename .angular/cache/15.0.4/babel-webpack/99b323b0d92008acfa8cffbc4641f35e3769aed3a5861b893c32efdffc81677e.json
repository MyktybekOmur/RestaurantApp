{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nlet CartService = class CartService {\n  constructor() {\n    this.items$ = new BehaviorSubject([]);\n  }\n  getCart() {\n    return this.items$.asObservable();\n  }\n  addToCart(newItem) {\n    this.items$.next([...this.items$.getValue(), newItem]);\n  }\n  removeItem(id) {\n    this.items$.next(this.items$.getValue().filter(item => item.id !== id));\n  }\n  changeQty(quantity, id) {\n    const items = this.items$.getValue();\n    const index = items.findIndex(item => item.id === id);\n    items[index].quantity += quantity;\n    this.items$.next(items);\n  }\n  removeAll() {}\n  getTotalAmount() {\n    return this.items$.pipe(map(items => {\n      let total = 0;\n      items.forEach(item => {\n        total += item.quantity * item.price;\n      });\n      return total;\n    }));\n  }\n};\nCartService = __decorate([Injectable({\n  providedIn: 'root'\n})], CartService);\nexport { CartService };","map":{"version":3,"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,eAAe,QAAQ,MAAM;AAEtC,SAASC,GAAG,QAAQ,gBAAgB;AAK7B,IAAMC,WAAW,GAAjB,MAAMA,WAAW;EAAjBC;IACG,WAAM,GAAG,IAAIH,eAAe,CAAa,EAEhD,CAAC;EAmCJ;EAjCEI,OAAO;IACL,OAAO,IAAI,CAACC,MAAM,CAACC,YAAY,EAAE;EACnC;EAEAC,SAAS,CAACC,OAAiB;IACzB,IAAI,CAACH,MAAM,CAACI,IAAI,CAAC,CAAC,GAAG,IAAI,CAACJ,MAAM,CAACK,QAAQ,EAAE,EAAEF,OAAO,CAAC,CAAC;EACxD;EAEAG,UAAU,CAACC,EAAU;IACnB,IAAI,CAACP,MAAM,CAACI,IAAI,CAAC,IAAI,CAACJ,MAAM,CAACK,QAAQ,EAAE,CAACG,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACF,EAAE,KAAKA,EAAE,CAAC,CAAC;EAC3E;EAEAG,SAAS,CAACC,QAAgB,EAAEJ,EAAU;IACpC,MAAMK,KAAK,GAAG,IAAI,CAACZ,MAAM,CAACK,QAAQ,EAAE;IACpC,MAAMQ,KAAK,GAAGD,KAAK,CAACE,SAAS,CAAEL,IAAI,IAAKA,IAAI,CAACF,EAAE,KAAKA,EAAE,CAAC;IACvDK,KAAK,CAACC,KAAK,CAAC,CAACF,QAAQ,IAAIA,QAAQ;IACjC,IAAI,CAACX,MAAM,CAACI,IAAI,CAACQ,KAAK,CAAC;EACzB;EACAG,SAAS,IAET;EACAC,cAAc;IACZ,OAAO,IAAI,CAAChB,MAAM,CAACiB,IAAI,CACrBrB,GAAG,CAAEgB,KAAK,IAAI;MACZ,IAAIM,KAAK,GAAG,CAAC;MACbN,KAAK,CAACO,OAAO,CAAEV,IAAI,IAAI;QACrBS,KAAK,IAAIT,IAAI,CAACE,QAAQ,GAAGF,IAAI,CAACW,KAAK;MACrC,CAAC,CAAC;MAEF,OAAOF,KAAK;IACd,CAAC,CAAC,CACH;EACH;;AArCWrB,WAAW,eAHvBH,UAAU,CAAC;EACV2B,UAAU,EAAE;CACb,CAAC,GACWxB,WAAW;SAAXA,WAAW","names":["Injectable","BehaviorSubject","map","CartService","constructor","getCart","items$","asObservable","addToCart","newItem","next","getValue","removeItem","id","filter","item","changeQty","quantity","items","index","findIndex","removeAll","getTotalAmount","pipe","total","forEach","price","providedIn"],"sourceRoot":"","sources":["/Users/myktybekomurbekov/Documents/projects/NodeJS/RestaurantApp/src/app/services/cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { CartItem } from '../models/cart-item.model';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartService {\n  private items$ = new BehaviorSubject<CartItem[]>([\n\n  ]);\n\n  getCart() {\n    return this.items$.asObservable();\n  }\n\n  addToCart(newItem: CartItem) {\n    this.items$.next([...this.items$.getValue(), newItem]);\n  }\n\n  removeItem(id: number) {\n    this.items$.next(this.items$.getValue().filter((item) => item.id !== id));\n  }\n\n  changeQty(quantity: number, id: number) {\n    const items = this.items$.getValue();\n    const index = items.findIndex((item) => item.id === id);\n    items[index].quantity += quantity;\n    this.items$.next(items);\n  }\n  removeAll(){\n\n  }\n  getTotalAmount() {\n    return this.items$.pipe(\n      map((items) => {\n        let total = 0;\n        items.forEach((item) => {\n          total += item.quantity * item.price;\n        });\n\n        return total;\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}