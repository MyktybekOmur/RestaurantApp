{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { addDoc, collection, collectionData, doc, docData, Firestore, updateDoc } from '@angular/fire/firestore';\nimport { getDownloadURL, ref, Storage, uploadString } from '@angular/fire/storage';\nlet ProductsService = class ProductsService {\n  constructor(firestore, storage) {\n    this.firestore = firestore;\n    this.storage = storage;\n  }\n  getProducts() {\n    const userDocRef = collection(this.firestore, 'products');\n    return collectionData(userDocRef, {\n      idField: 'id'\n    });\n  }\n  getProduct(id) {\n    const userDocRef = doc(this.firestore, `products/${id}`);\n    return docData(userDocRef, {\n      idField: 'id'\n    });\n  }\n  setProduct(body) {\n    return __awaiter(this, void 0, void 0, function* () {\n      console.log(body);\n      try {\n        const userDocRef = collection(this.firestore, 'products');\n        yield addDoc(userDocRef, body);\n        return true;\n      } catch (e) {\n        return null;\n      }\n    });\n  }\n  updateProduct(id, body) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        try {\n          const userDocRef = doc(this.firestore, `products/${id}`);\n          yield updateDoc(userDocRef, body);\n          return true;\n        } catch (e) {\n          return null;\n        }\n      } catch (e) {\n        return null;\n      }\n    });\n  }\n  uploadImage(cameraFile, id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const path = `products/${id}/image.png`;\n      const storageRef = ref(this.storage, path);\n      try {\n        yield uploadString(storageRef, cameraFile.base64String, 'base64');\n        const image = yield getDownloadURL(storageRef);\n        const userDocRef = doc(this.firestore, `products/${id}`);\n        console.log(userDocRef);\n        yield updateDoc(userDocRef, {\n          image\n        });\n        return true;\n      } catch (e) {\n        return null;\n      }\n    });\n  }\n};\nProductsService.ctorParameters = () => [{\n  type: Firestore\n}, {\n  type: Storage\n}];\nProductsService = __decorate([Injectable({\n  providedIn: 'root'\n})], ProductsService);\nexport { ProductsService };","map":{"version":3,"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SACEC,MAAM,EACNC,UAAU,EACVC,cAAc,EACdC,GAAG,EACHC,OAAO,EACPC,SAAS,EAETC,SAAS,QACJ,yBAAyB;AAGhC,SACEC,cAAc,EACdC,GAAG,EACHC,OAAO,EACPC,YAAY,QACP,uBAAuB;AAIvB,IAAMC,eAAe,GAArB,MAAMA,eAAe;EAC1BC,YAAoBC,SAAoB,EAAUC,OAAgB;IAA9C,cAAS,GAATD,SAAS;IAAqB,YAAO,GAAPC,OAAO;EAAY;EACrEC,WAAW;IACT,MAAMC,UAAU,GAAGf,UAAU,CAAC,IAAI,CAACY,SAAS,EAAE,UAAU,CAAC;IACzD,OAAOX,cAAc,CAACc,UAAU,EAAE;MAAEC,OAAO,EAAE;IAAI,CAAE,CAAC;EACtD;EACAC,UAAU,CAACC,EAAU;IACnB,MAAMH,UAAU,GAAGb,GAAG,CAAC,IAAI,CAACU,SAAS,EAAE,YAAYM,EAAE,EAAE,CAAC;IACxD,OAAOf,OAAO,CAACY,UAAU,EAAE;MAAEC,OAAO,EAAE;IAAI,CAAE,CAAC;EAC/C;EAEMG,UAAU,CAACC,IAAI;;MACnBC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;MACjB,IAAI;QACF,MAAML,UAAU,GAAGf,UAAU,CAAC,IAAI,CAACY,SAAS,EAAE,UAAU,CAAC;QACzD,MAAMb,MAAM,CAACgB,UAAU,EAAEK,IAAI,CAAC;QAC9B,OAAO,IAAI;OACZ,CAAC,OAAOG,CAAC,EAAE;QACV,OAAO,IAAI;;IAEf,CAAC;;EACKC,aAAa,CAACN,EAAU,EAAEE,IAAS;;MACvC,IAAI;QACF,IAAI;UACF,MAAML,UAAU,GAAGb,GAAG,CAAC,IAAI,CAACU,SAAS,EAAE,YAAYM,EAAE,EAAE,CAAC;UACxD,MAAMb,SAAS,CAACU,UAAU,EAAEK,IAAI,CAAC;UACjC,OAAO,IAAI;SACZ,CAAC,OAAOG,CAAC,EAAE;UACV,OAAO,IAAI;;OAEd,CAAC,OAAOA,CAAC,EAAE;QACV,OAAO,IAAI;;IAEf,CAAC;;EAEKE,WAAW,CAACC,UAAiB,EAAER,EAAU;;MAC7C,MAAMS,IAAI,GAAG,YAAYT,EAAE,YAAY;MACvC,MAAMU,UAAU,GAAGrB,GAAG,CAAC,IAAI,CAACM,OAAO,EAAEc,IAAI,CAAC;MAE1C,IAAI;QACF,MAAMlB,YAAY,CAACmB,UAAU,EAAEF,UAAU,CAACG,YAAY,EAAE,QAAQ,CAAC;QACjE,MAAMC,KAAK,GAAG,MAAMxB,cAAc,CAACsB,UAAU,CAAC;QAC9C,MAAMb,UAAU,GAAGb,GAAG,CAAC,IAAI,CAACU,SAAS,EAAE,YAAYM,EAAE,EAAE,CAAC;QACxDG,OAAO,CAACC,GAAG,CAACP,UAAU,CAAC;QACvB,MAAMV,SAAS,CAACU,UAAU,EAAE;UAAEe;QAAK,CAAE,CAAC;QACtC,OAAO,IAAI;OACZ,CAAC,OAAOP,CAAC,EAAE;QACV,OAAO,IAAI;;IAEf,CAAC;;;;;;;;AAjDUb,eAAe,eAH3BZ,UAAU,CAAC;EACViC,UAAU,EAAE;CACb,CAAC,GACWrB,eAAe;SAAfA,eAAe","names":["Injectable","addDoc","collection","collectionData","doc","docData","Firestore","updateDoc","getDownloadURL","ref","Storage","uploadString","ProductsService","constructor","firestore","storage","getProducts","userDocRef","idField","getProduct","id","setProduct","body","console","log","e","updateProduct","uploadImage","cameraFile","path","storageRef","base64String","image","providedIn"],"sourceRoot":"","sources":["/Users/myktybekomurbekov/Documents/projects/NodeJS/RestaurantApp/src/app/services/products/products.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  addDoc,\n  collection,\n  collectionData,\n  doc,\n  docData,\n  Firestore,\n  setDoc,\n  updateDoc,\n} from '@angular/fire/firestore';\nimport { Observable } from 'rxjs';\nimport { Photo } from '@capacitor/camera';\nimport {\n  getDownloadURL,\n  ref,\n  Storage,\n  uploadString,\n} from '@angular/fire/storage';\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductsService {\n  constructor(private firestore: Firestore, private storage: Storage) {}\n  getProducts(): Observable<any> {\n    const userDocRef = collection(this.firestore, 'products');\n    return collectionData(userDocRef, { idField: 'id' });\n  }\n  getProduct(id: string): Observable<any> {\n    const userDocRef = doc(this.firestore, `products/${id}`);\n    return docData(userDocRef, { idField: 'id' });\n  }\n\n  async setProduct(body) {\n    console.log(body);\n    try {\n      const userDocRef = collection(this.firestore, 'products');\n      await addDoc(userDocRef, body);\n      return true;\n    } catch (e) {\n      return null;\n    }\n  }\n  async updateProduct(id: string, body: any) {\n    try {\n      try {\n        const userDocRef = doc(this.firestore, `products/${id}`);\n        await updateDoc(userDocRef, body);\n        return true;\n      } catch (e) {\n        return null;\n      }\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async uploadImage(cameraFile: Photo, id: string) {\n    const path = `products/${id}/image.png`;\n    const storageRef = ref(this.storage, path);\n\n    try {\n      await uploadString(storageRef, cameraFile.base64String, 'base64');\n      const image = await getDownloadURL(storageRef);\n      const userDocRef = doc(this.firestore, `products/${id}`);\n      console.log(userDocRef);\n      await updateDoc(userDocRef, { image });\n      return true;\n    } catch (e) {\n      return null;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}