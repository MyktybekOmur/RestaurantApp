{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { addDoc, collection, collectionData, doc, docData, Firestore, query, updateDoc, where } from '@angular/fire/firestore';\nimport { getDownloadURL, ref, Storage, uploadString } from '@angular/fire/storage';\nlet UsersService = class UsersService {\n  constructor(firestore, storage) {\n    this.firestore = firestore;\n    this.storage = storage;\n  }\n  getUsers() {\n    const userDocRef = collection(this.firestore, 'users');\n    return collectionData(userDocRef, {\n      idField: 'id'\n    });\n  }\n  getUser(id) {\n    const userDocRef = doc(this.firestore, `users/${id}`);\n    return docData(userDocRef, {\n      idField: 'id'\n    });\n  }\n  login(body) {\n    const userDocRef = collection(this.firestore, 'users');\n    const q = query(userDocRef, where(\"number\", \"==\", body.number), where(\"password\", \"==\", body.password));\n    return collectionData(q, {\n      idField: 'id'\n    });\n  }\n  setUser(body) {\n    return __awaiter(this, void 0, void 0, function* () {\n      console.log(body);\n      try {\n        const userDocRef = collection(this.firestore, 'users');\n        return yield addDoc(userDocRef, body);\n      } catch (e) {\n        return null;\n      }\n    });\n  }\n  updateUser(id, body) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        try {\n          const userDocRef = doc(this.firestore, `users/${id}`);\n          yield updateDoc(userDocRef, body);\n          return true;\n        } catch (e) {\n          return null;\n        }\n      } catch (e) {\n        return null;\n      }\n    });\n  }\n  uploadImage(cameraFile, id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const path = `users/${id}/profile.png`;\n      const storageRef = ref(this.storage, path);\n      try {\n        yield uploadString(storageRef, cameraFile.base64String, 'base64');\n        const image = yield getDownloadURL(storageRef);\n        const userDocRef = doc(this.firestore, `users/${id}`);\n        console.log(userDocRef);\n        yield updateDoc(userDocRef, {\n          image\n        });\n        return true;\n      } catch (e) {\n        return null;\n      }\n    });\n  }\n};\nUsersService.ctorParameters = () => [{\n  type: Firestore\n}, {\n  type: Storage\n}];\nUsersService = __decorate([Injectable({\n  providedIn: 'root'\n})], UsersService);\nexport { UsersService };","map":{"version":3,"mappings":"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","names":["Injectable","addDoc","collection","collectionData","doc","docData","Firestore","query","updateDoc","where","getDownloadURL","ref","Storage","uploadString","UsersService","constructor","firestore","storage","getUsers","userDocRef","idField","getUser","id","login","body","q","number","password","setUser","console","log","e","updateUser","uploadImage","cameraFile","path","storageRef","base64String","image","providedIn"],"sourceRoot":"","sources":["/Users/myktybekomurbekov/Documents/projects/NodeJS/RestaurantApp/src/app/services/users/users.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  addDoc,\n  collection,\n  collectionData,\n  doc,\n  docData,\n  Firestore,\n  query,\n  setDoc,\n  updateDoc,\n  where,\n} from '@angular/fire/firestore';\nimport { Observable } from 'rxjs';\nimport { Photo } from '@capacitor/camera';\nimport {\n  getDownloadURL,\n  ref,\n  Storage,\n  uploadString,\n} from '@angular/fire/storage';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsersService {\n  constructor(private firestore: Firestore, private storage: Storage) {}\n  getUsers(): Observable<any> {\n    const userDocRef = collection(this.firestore, 'users');\n    return collectionData(userDocRef, { idField: 'id' });\n  }\n  getUser(id: string): Observable<any> {\n    const userDocRef = doc(this.firestore, `users/${id}`);\n    return docData(userDocRef, { idField: 'id' });\n  }\n  login(body:any): Observable<any> {\n    const userDocRef = collection(this.firestore, 'users');\n    const q =  query(userDocRef, where(\"number\", \"==\", body.number), where(\"password\", \"==\", body.password));\n    return collectionData(q, { idField: 'id' });\n  }\n\n \n\n  async setUser(body) {\n    console.log(body);\n    try {\n      const userDocRef = collection(this.firestore, 'users');\n     \n      return await addDoc(userDocRef, body);\n    } catch (e) {\n      return null;\n    }\n  }\n  async updateUser(id: string, body: any) {\n    try {\n      try {\n        const userDocRef = doc(this.firestore, `users/${id}`);\n        await updateDoc(userDocRef, body);\n        return true;\n      } catch (e) {\n        return null;\n      }\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async uploadImage(cameraFile: Photo, id: string) {\n    const path = `users/${id}/profile.png`;\n    const storageRef = ref(this.storage, path);\n    try {\n      await uploadString(storageRef, cameraFile.base64String, 'base64');\n      const image = await getDownloadURL(storageRef);\n      const userDocRef = doc(this.firestore, `users/${id}`);\n      console.log(userDocRef);\n      await updateDoc(userDocRef, { image });\n      return true;\n    } catch (e) {\n      return null;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}